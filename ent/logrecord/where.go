// Code generated by ent, DO NOT EDIT.

package logrecord

import (
	"moonlogs/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldID, id))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldText, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// SchemaName applies equality check predicate on the "schema_name" field. It's identical to SchemaNameEQ.
func SchemaName(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldSchemaName, v))
}

// SchemaID applies equality check predicate on the "schema_id" field. It's identical to SchemaIDEQ.
func SchemaID(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldSchemaID, v))
}

// GroupHash applies equality check predicate on the "group_hash" field. It's identical to GroupHashEQ.
func GroupHash(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldGroupHash, v))
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldLevel, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContainsFold(FieldText, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// SchemaNameEQ applies the EQ predicate on the "schema_name" field.
func SchemaNameEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldSchemaName, v))
}

// SchemaNameNEQ applies the NEQ predicate on the "schema_name" field.
func SchemaNameNEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldSchemaName, v))
}

// SchemaNameIn applies the In predicate on the "schema_name" field.
func SchemaNameIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldSchemaName, vs...))
}

// SchemaNameNotIn applies the NotIn predicate on the "schema_name" field.
func SchemaNameNotIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldSchemaName, vs...))
}

// SchemaNameGT applies the GT predicate on the "schema_name" field.
func SchemaNameGT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldSchemaName, v))
}

// SchemaNameGTE applies the GTE predicate on the "schema_name" field.
func SchemaNameGTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldSchemaName, v))
}

// SchemaNameLT applies the LT predicate on the "schema_name" field.
func SchemaNameLT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldSchemaName, v))
}

// SchemaNameLTE applies the LTE predicate on the "schema_name" field.
func SchemaNameLTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldSchemaName, v))
}

// SchemaNameContains applies the Contains predicate on the "schema_name" field.
func SchemaNameContains(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContains(FieldSchemaName, v))
}

// SchemaNameHasPrefix applies the HasPrefix predicate on the "schema_name" field.
func SchemaNameHasPrefix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasPrefix(FieldSchemaName, v))
}

// SchemaNameHasSuffix applies the HasSuffix predicate on the "schema_name" field.
func SchemaNameHasSuffix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasSuffix(FieldSchemaName, v))
}

// SchemaNameEqualFold applies the EqualFold predicate on the "schema_name" field.
func SchemaNameEqualFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEqualFold(FieldSchemaName, v))
}

// SchemaNameContainsFold applies the ContainsFold predicate on the "schema_name" field.
func SchemaNameContainsFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContainsFold(FieldSchemaName, v))
}

// SchemaIDEQ applies the EQ predicate on the "schema_id" field.
func SchemaIDEQ(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldSchemaID, v))
}

// SchemaIDNEQ applies the NEQ predicate on the "schema_id" field.
func SchemaIDNEQ(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldSchemaID, v))
}

// SchemaIDIn applies the In predicate on the "schema_id" field.
func SchemaIDIn(vs ...int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldSchemaID, vs...))
}

// SchemaIDNotIn applies the NotIn predicate on the "schema_id" field.
func SchemaIDNotIn(vs ...int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldSchemaID, vs...))
}

// SchemaIDGT applies the GT predicate on the "schema_id" field.
func SchemaIDGT(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldSchemaID, v))
}

// SchemaIDGTE applies the GTE predicate on the "schema_id" field.
func SchemaIDGTE(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldSchemaID, v))
}

// SchemaIDLT applies the LT predicate on the "schema_id" field.
func SchemaIDLT(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldSchemaID, v))
}

// SchemaIDLTE applies the LTE predicate on the "schema_id" field.
func SchemaIDLTE(v int) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldSchemaID, v))
}

// GroupHashEQ applies the EQ predicate on the "group_hash" field.
func GroupHashEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldGroupHash, v))
}

// GroupHashNEQ applies the NEQ predicate on the "group_hash" field.
func GroupHashNEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldGroupHash, v))
}

// GroupHashIn applies the In predicate on the "group_hash" field.
func GroupHashIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldGroupHash, vs...))
}

// GroupHashNotIn applies the NotIn predicate on the "group_hash" field.
func GroupHashNotIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldGroupHash, vs...))
}

// GroupHashGT applies the GT predicate on the "group_hash" field.
func GroupHashGT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldGroupHash, v))
}

// GroupHashGTE applies the GTE predicate on the "group_hash" field.
func GroupHashGTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldGroupHash, v))
}

// GroupHashLT applies the LT predicate on the "group_hash" field.
func GroupHashLT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldGroupHash, v))
}

// GroupHashLTE applies the LTE predicate on the "group_hash" field.
func GroupHashLTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldGroupHash, v))
}

// GroupHashContains applies the Contains predicate on the "group_hash" field.
func GroupHashContains(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContains(FieldGroupHash, v))
}

// GroupHashHasPrefix applies the HasPrefix predicate on the "group_hash" field.
func GroupHashHasPrefix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasPrefix(FieldGroupHash, v))
}

// GroupHashHasSuffix applies the HasSuffix predicate on the "group_hash" field.
func GroupHashHasSuffix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasSuffix(FieldGroupHash, v))
}

// GroupHashIsNil applies the IsNil predicate on the "group_hash" field.
func GroupHashIsNil() predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIsNull(FieldGroupHash))
}

// GroupHashNotNil applies the NotNil predicate on the "group_hash" field.
func GroupHashNotNil() predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotNull(FieldGroupHash))
}

// GroupHashEqualFold applies the EqualFold predicate on the "group_hash" field.
func GroupHashEqualFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEqualFold(FieldGroupHash, v))
}

// GroupHashContainsFold applies the ContainsFold predicate on the "group_hash" field.
func GroupHashContainsFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContainsFold(FieldGroupHash, v))
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEQ(FieldLevel, v))
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNEQ(FieldLevel, v))
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldIn(FieldLevel, vs...))
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldNotIn(FieldLevel, vs...))
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGT(FieldLevel, v))
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldGTE(FieldLevel, v))
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLT(FieldLevel, v))
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldLTE(FieldLevel, v))
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContains(FieldLevel, v))
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasPrefix(FieldLevel, v))
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldHasSuffix(FieldLevel, v))
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldEqualFold(FieldLevel, v))
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.LogRecord {
	return predicate.LogRecord(sql.FieldContainsFold(FieldLevel, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.LogRecord) predicate.LogRecord {
	return predicate.LogRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.LogRecord) predicate.LogRecord {
	return predicate.LogRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.LogRecord) predicate.LogRecord {
	return predicate.LogRecord(sql.NotPredicates(p))
}
