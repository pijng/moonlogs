// Code generated by ent, DO NOT EDIT.

package logrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the logrecord type in the database.
	Label = "log_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldText holds the string denoting the text field in the database.
	FieldText = "text"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldSchemaName holds the string denoting the schema_name field in the database.
	FieldSchemaName = "schema_name"
	// FieldSchemaID holds the string denoting the schema_id field in the database.
	FieldSchemaID = "schema_id"
	// FieldQuery holds the string denoting the query field in the database.
	FieldQuery = "query"
	// FieldGroupHash holds the string denoting the group_hash field in the database.
	FieldGroupHash = "group_hash"
	// Table holds the table name of the logrecord in the database.
	Table = "log_records"
)

// Columns holds all SQL columns for logrecord fields.
var Columns = []string{
	FieldID,
	FieldText,
	FieldCreatedAt,
	FieldSchemaName,
	FieldSchemaID,
	FieldQuery,
	FieldGroupHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TextValidator is a validator for the "text" field. It is called by the builders before save.
	TextValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// SchemaNameValidator is a validator for the "schema_name" field. It is called by the builders before save.
	SchemaNameValidator func(string) error
	// SchemaIDValidator is a validator for the "schema_id" field. It is called by the builders before save.
	SchemaIDValidator func(int) error
)

// OrderOption defines the ordering options for the LogRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByText orders the results by the text field.
func ByText(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldText, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// BySchemaName orders the results by the schema_name field.
func BySchemaName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchemaName, opts...).ToFunc()
}

// BySchemaID orders the results by the schema_id field.
func BySchemaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSchemaID, opts...).ToFunc()
}

// ByGroupHash orders the results by the group_hash field.
func ByGroupHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGroupHash, opts...).ToFunc()
}
