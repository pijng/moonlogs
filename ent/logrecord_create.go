// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"moonlogs/ent/logrecord"
	"moonlogs/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogRecordCreate is the builder for creating a LogRecord entity.
type LogRecordCreate struct {
	config
	mutation *LogRecordMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (lrc *LogRecordCreate) SetText(s string) *LogRecordCreate {
	lrc.mutation.SetText(s)
	return lrc
}

// SetCreatedAt sets the "created_at" field.
func (lrc *LogRecordCreate) SetCreatedAt(t time.Time) *LogRecordCreate {
	lrc.mutation.SetCreatedAt(t)
	return lrc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lrc *LogRecordCreate) SetNillableCreatedAt(t *time.Time) *LogRecordCreate {
	if t != nil {
		lrc.SetCreatedAt(*t)
	}
	return lrc
}

// SetSchemaName sets the "schema_name" field.
func (lrc *LogRecordCreate) SetSchemaName(s string) *LogRecordCreate {
	lrc.mutation.SetSchemaName(s)
	return lrc
}

// SetSchemaID sets the "schema_id" field.
func (lrc *LogRecordCreate) SetSchemaID(i int) *LogRecordCreate {
	lrc.mutation.SetSchemaID(i)
	return lrc
}

// SetMeta sets the "meta" field.
func (lrc *LogRecordCreate) SetMeta(s schema.Meta) *LogRecordCreate {
	lrc.mutation.SetMeta(s)
	return lrc
}

// Mutation returns the LogRecordMutation object of the builder.
func (lrc *LogRecordCreate) Mutation() *LogRecordMutation {
	return lrc.mutation
}

// Save creates the LogRecord in the database.
func (lrc *LogRecordCreate) Save(ctx context.Context) (*LogRecord, error) {
	lrc.defaults()
	return withHooks(ctx, lrc.sqlSave, lrc.mutation, lrc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lrc *LogRecordCreate) SaveX(ctx context.Context) *LogRecord {
	v, err := lrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrc *LogRecordCreate) Exec(ctx context.Context) error {
	_, err := lrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrc *LogRecordCreate) ExecX(ctx context.Context) {
	if err := lrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lrc *LogRecordCreate) defaults() {
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		v := logrecord.DefaultCreatedAt()
		lrc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lrc *LogRecordCreate) check() error {
	if _, ok := lrc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "LogRecord.text"`)}
	}
	if v, ok := lrc.mutation.Text(); ok {
		if err := logrecord.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "LogRecord.text": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "LogRecord.created_at"`)}
	}
	if _, ok := lrc.mutation.SchemaName(); !ok {
		return &ValidationError{Name: "schema_name", err: errors.New(`ent: missing required field "LogRecord.schema_name"`)}
	}
	if v, ok := lrc.mutation.SchemaName(); ok {
		if err := logrecord.SchemaNameValidator(v); err != nil {
			return &ValidationError{Name: "schema_name", err: fmt.Errorf(`ent: validator failed for field "LogRecord.schema_name": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.SchemaID(); !ok {
		return &ValidationError{Name: "schema_id", err: errors.New(`ent: missing required field "LogRecord.schema_id"`)}
	}
	if v, ok := lrc.mutation.SchemaID(); ok {
		if err := logrecord.SchemaIDValidator(v); err != nil {
			return &ValidationError{Name: "schema_id", err: fmt.Errorf(`ent: validator failed for field "LogRecord.schema_id": %w`, err)}
		}
	}
	if _, ok := lrc.mutation.Meta(); !ok {
		return &ValidationError{Name: "meta", err: errors.New(`ent: missing required field "LogRecord.meta"`)}
	}
	return nil
}

func (lrc *LogRecordCreate) sqlSave(ctx context.Context) (*LogRecord, error) {
	if err := lrc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lrc.mutation.id = &_node.ID
	lrc.mutation.done = true
	return _node, nil
}

func (lrc *LogRecordCreate) createSpec() (*LogRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &LogRecord{config: lrc.config}
		_spec = sqlgraph.NewCreateSpec(logrecord.Table, sqlgraph.NewFieldSpec(logrecord.FieldID, field.TypeInt))
	)
	if value, ok := lrc.mutation.Text(); ok {
		_spec.SetField(logrecord.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := lrc.mutation.CreatedAt(); ok {
		_spec.SetField(logrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := lrc.mutation.SchemaName(); ok {
		_spec.SetField(logrecord.FieldSchemaName, field.TypeString, value)
		_node.SchemaName = value
	}
	if value, ok := lrc.mutation.SchemaID(); ok {
		_spec.SetField(logrecord.FieldSchemaID, field.TypeInt, value)
		_node.SchemaID = value
	}
	if value, ok := lrc.mutation.Meta(); ok {
		_spec.SetField(logrecord.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	return _node, _spec
}

// LogRecordCreateBulk is the builder for creating many LogRecord entities in bulk.
type LogRecordCreateBulk struct {
	config
	builders []*LogRecordCreate
}

// Save creates the LogRecord entities in the database.
func (lrcb *LogRecordCreateBulk) Save(ctx context.Context) ([]*LogRecord, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lrcb.builders))
	nodes := make([]*LogRecord, len(lrcb.builders))
	mutators := make([]Mutator, len(lrcb.builders))
	for i := range lrcb.builders {
		func(i int, root context.Context) {
			builder := lrcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lrcb *LogRecordCreateBulk) SaveX(ctx context.Context) []*LogRecord {
	v, err := lrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lrcb *LogRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := lrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lrcb *LogRecordCreateBulk) ExecX(ctx context.Context) {
	if err := lrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
