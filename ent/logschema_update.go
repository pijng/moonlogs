// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"moonlogs/ent/logschema"
	"moonlogs/ent/predicate"
	"moonlogs/ent/schema"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// LogSchemaUpdate is the builder for updating LogSchema entities.
type LogSchemaUpdate struct {
	config
	hooks    []Hook
	mutation *LogSchemaMutation
}

// Where appends a list predicates to the LogSchemaUpdate builder.
func (lsu *LogSchemaUpdate) Where(ps ...predicate.LogSchema) *LogSchemaUpdate {
	lsu.mutation.Where(ps...)
	return lsu
}

// SetTitle sets the "title" field.
func (lsu *LogSchemaUpdate) SetTitle(s string) *LogSchemaUpdate {
	lsu.mutation.SetTitle(s)
	return lsu
}

// SetDescription sets the "description" field.
func (lsu *LogSchemaUpdate) SetDescription(s string) *LogSchemaUpdate {
	lsu.mutation.SetDescription(s)
	return lsu
}

// SetFields sets the "fields" field.
func (lsu *LogSchemaUpdate) SetFields(s []schema.Field) *LogSchemaUpdate {
	lsu.mutation.SetFields(s)
	return lsu
}

// AppendFields appends s to the "fields" field.
func (lsu *LogSchemaUpdate) AppendFields(s []schema.Field) *LogSchemaUpdate {
	lsu.mutation.AppendFields(s)
	return lsu
}

// SetRetentionTime sets the "retention_time" field.
func (lsu *LogSchemaUpdate) SetRetentionTime(i int64) *LogSchemaUpdate {
	lsu.mutation.ResetRetentionTime()
	lsu.mutation.SetRetentionTime(i)
	return lsu
}

// SetNillableRetentionTime sets the "retention_time" field if the given value is not nil.
func (lsu *LogSchemaUpdate) SetNillableRetentionTime(i *int64) *LogSchemaUpdate {
	if i != nil {
		lsu.SetRetentionTime(*i)
	}
	return lsu
}

// AddRetentionTime adds i to the "retention_time" field.
func (lsu *LogSchemaUpdate) AddRetentionTime(i int64) *LogSchemaUpdate {
	lsu.mutation.AddRetentionTime(i)
	return lsu
}

// ClearRetentionTime clears the value of the "retention_time" field.
func (lsu *LogSchemaUpdate) ClearRetentionTime() *LogSchemaUpdate {
	lsu.mutation.ClearRetentionTime()
	return lsu
}

// Mutation returns the LogSchemaMutation object of the builder.
func (lsu *LogSchemaUpdate) Mutation() *LogSchemaMutation {
	return lsu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (lsu *LogSchemaUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, lsu.sqlSave, lsu.mutation, lsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsu *LogSchemaUpdate) SaveX(ctx context.Context) int {
	affected, err := lsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (lsu *LogSchemaUpdate) Exec(ctx context.Context) error {
	_, err := lsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsu *LogSchemaUpdate) ExecX(ctx context.Context) {
	if err := lsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsu *LogSchemaUpdate) check() error {
	if v, ok := lsu.mutation.Title(); ok {
		if err := logschema.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LogSchema.title": %w`, err)}
		}
	}
	return nil
}

func (lsu *LogSchemaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := lsu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(logschema.Table, logschema.Columns, sqlgraph.NewFieldSpec(logschema.FieldID, field.TypeInt))
	if ps := lsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsu.mutation.Title(); ok {
		_spec.SetField(logschema.FieldTitle, field.TypeString, value)
	}
	if value, ok := lsu.mutation.Description(); ok {
		_spec.SetField(logschema.FieldDescription, field.TypeString, value)
	}
	if value, ok := lsu.mutation.GetFields(); ok {
		_spec.SetField(logschema.FieldFields, field.TypeJSON, value)
	}
	if value, ok := lsu.mutation.AppendedFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, logschema.FieldFields, value)
		})
	}
	if value, ok := lsu.mutation.RetentionTime(); ok {
		_spec.SetField(logschema.FieldRetentionTime, field.TypeInt64, value)
	}
	if value, ok := lsu.mutation.AddedRetentionTime(); ok {
		_spec.AddField(logschema.FieldRetentionTime, field.TypeInt64, value)
	}
	if lsu.mutation.RetentionTimeCleared() {
		_spec.ClearField(logschema.FieldRetentionTime, field.TypeInt64)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, lsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	lsu.mutation.done = true
	return n, nil
}

// LogSchemaUpdateOne is the builder for updating a single LogSchema entity.
type LogSchemaUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *LogSchemaMutation
}

// SetTitle sets the "title" field.
func (lsuo *LogSchemaUpdateOne) SetTitle(s string) *LogSchemaUpdateOne {
	lsuo.mutation.SetTitle(s)
	return lsuo
}

// SetDescription sets the "description" field.
func (lsuo *LogSchemaUpdateOne) SetDescription(s string) *LogSchemaUpdateOne {
	lsuo.mutation.SetDescription(s)
	return lsuo
}

// SetFields sets the "fields" field.
func (lsuo *LogSchemaUpdateOne) SetFields(s []schema.Field) *LogSchemaUpdateOne {
	lsuo.mutation.SetFields(s)
	return lsuo
}

// AppendFields appends s to the "fields" field.
func (lsuo *LogSchemaUpdateOne) AppendFields(s []schema.Field) *LogSchemaUpdateOne {
	lsuo.mutation.AppendFields(s)
	return lsuo
}

// SetRetentionTime sets the "retention_time" field.
func (lsuo *LogSchemaUpdateOne) SetRetentionTime(i int64) *LogSchemaUpdateOne {
	lsuo.mutation.ResetRetentionTime()
	lsuo.mutation.SetRetentionTime(i)
	return lsuo
}

// SetNillableRetentionTime sets the "retention_time" field if the given value is not nil.
func (lsuo *LogSchemaUpdateOne) SetNillableRetentionTime(i *int64) *LogSchemaUpdateOne {
	if i != nil {
		lsuo.SetRetentionTime(*i)
	}
	return lsuo
}

// AddRetentionTime adds i to the "retention_time" field.
func (lsuo *LogSchemaUpdateOne) AddRetentionTime(i int64) *LogSchemaUpdateOne {
	lsuo.mutation.AddRetentionTime(i)
	return lsuo
}

// ClearRetentionTime clears the value of the "retention_time" field.
func (lsuo *LogSchemaUpdateOne) ClearRetentionTime() *LogSchemaUpdateOne {
	lsuo.mutation.ClearRetentionTime()
	return lsuo
}

// Mutation returns the LogSchemaMutation object of the builder.
func (lsuo *LogSchemaUpdateOne) Mutation() *LogSchemaMutation {
	return lsuo.mutation
}

// Where appends a list predicates to the LogSchemaUpdate builder.
func (lsuo *LogSchemaUpdateOne) Where(ps ...predicate.LogSchema) *LogSchemaUpdateOne {
	lsuo.mutation.Where(ps...)
	return lsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (lsuo *LogSchemaUpdateOne) Select(field string, fields ...string) *LogSchemaUpdateOne {
	lsuo.fields = append([]string{field}, fields...)
	return lsuo
}

// Save executes the query and returns the updated LogSchema entity.
func (lsuo *LogSchemaUpdateOne) Save(ctx context.Context) (*LogSchema, error) {
	return withHooks(ctx, lsuo.sqlSave, lsuo.mutation, lsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (lsuo *LogSchemaUpdateOne) SaveX(ctx context.Context) *LogSchema {
	node, err := lsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (lsuo *LogSchemaUpdateOne) Exec(ctx context.Context) error {
	_, err := lsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsuo *LogSchemaUpdateOne) ExecX(ctx context.Context) {
	if err := lsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsuo *LogSchemaUpdateOne) check() error {
	if v, ok := lsuo.mutation.Title(); ok {
		if err := logschema.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LogSchema.title": %w`, err)}
		}
	}
	return nil
}

func (lsuo *LogSchemaUpdateOne) sqlSave(ctx context.Context) (_node *LogSchema, err error) {
	if err := lsuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(logschema.Table, logschema.Columns, sqlgraph.NewFieldSpec(logschema.FieldID, field.TypeInt))
	id, ok := lsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "LogSchema.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := lsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, logschema.FieldID)
		for _, f := range fields {
			if !logschema.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != logschema.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := lsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := lsuo.mutation.Title(); ok {
		_spec.SetField(logschema.FieldTitle, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.Description(); ok {
		_spec.SetField(logschema.FieldDescription, field.TypeString, value)
	}
	if value, ok := lsuo.mutation.GetFields(); ok {
		_spec.SetField(logschema.FieldFields, field.TypeJSON, value)
	}
	if value, ok := lsuo.mutation.AppendedFields(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, logschema.FieldFields, value)
		})
	}
	if value, ok := lsuo.mutation.RetentionTime(); ok {
		_spec.SetField(logschema.FieldRetentionTime, field.TypeInt64, value)
	}
	if value, ok := lsuo.mutation.AddedRetentionTime(); ok {
		_spec.AddField(logschema.FieldRetentionTime, field.TypeInt64, value)
	}
	if lsuo.mutation.RetentionTimeCleared() {
		_spec.ClearField(logschema.FieldRetentionTime, field.TypeInt64)
	}
	_node = &LogSchema{config: lsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, lsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{logschema.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	lsuo.mutation.done = true
	return _node, nil
}
