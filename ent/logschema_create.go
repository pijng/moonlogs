// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"moonlogs/ent/logschema"
	"moonlogs/ent/schema"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// LogSchemaCreate is the builder for creating a LogSchema entity.
type LogSchemaCreate struct {
	config
	mutation *LogSchemaMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (lsc *LogSchemaCreate) SetTitle(s string) *LogSchemaCreate {
	lsc.mutation.SetTitle(s)
	return lsc
}

// SetDescription sets the "description" field.
func (lsc *LogSchemaCreate) SetDescription(s string) *LogSchemaCreate {
	lsc.mutation.SetDescription(s)
	return lsc
}

// SetName sets the "name" field.
func (lsc *LogSchemaCreate) SetName(s string) *LogSchemaCreate {
	lsc.mutation.SetName(s)
	return lsc
}

// SetFields sets the "fields" field.
func (lsc *LogSchemaCreate) SetFields(s []schema.Field) *LogSchemaCreate {
	lsc.mutation.SetFields(s)
	return lsc
}

// SetRetentionTime sets the "retention_time" field.
func (lsc *LogSchemaCreate) SetRetentionTime(i int64) *LogSchemaCreate {
	lsc.mutation.SetRetentionTime(i)
	return lsc
}

// SetNillableRetentionTime sets the "retention_time" field if the given value is not nil.
func (lsc *LogSchemaCreate) SetNillableRetentionTime(i *int64) *LogSchemaCreate {
	if i != nil {
		lsc.SetRetentionTime(*i)
	}
	return lsc
}

// Mutation returns the LogSchemaMutation object of the builder.
func (lsc *LogSchemaCreate) Mutation() *LogSchemaMutation {
	return lsc.mutation
}

// Save creates the LogSchema in the database.
func (lsc *LogSchemaCreate) Save(ctx context.Context) (*LogSchema, error) {
	return withHooks(ctx, lsc.sqlSave, lsc.mutation, lsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lsc *LogSchemaCreate) SaveX(ctx context.Context) *LogSchema {
	v, err := lsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lsc *LogSchemaCreate) Exec(ctx context.Context) error {
	_, err := lsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lsc *LogSchemaCreate) ExecX(ctx context.Context) {
	if err := lsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lsc *LogSchemaCreate) check() error {
	if _, ok := lsc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "LogSchema.title"`)}
	}
	if v, ok := lsc.mutation.Title(); ok {
		if err := logschema.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "LogSchema.title": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "LogSchema.description"`)}
	}
	if _, ok := lsc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "LogSchema.name"`)}
	}
	if v, ok := lsc.mutation.Name(); ok {
		if err := logschema.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "LogSchema.name": %w`, err)}
		}
	}
	if _, ok := lsc.mutation.GetFields(); !ok {
		return &ValidationError{Name: "fields", err: errors.New(`ent: missing required field "LogSchema.fields"`)}
	}
	return nil
}

func (lsc *LogSchemaCreate) sqlSave(ctx context.Context) (*LogSchema, error) {
	if err := lsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	lsc.mutation.id = &_node.ID
	lsc.mutation.done = true
	return _node, nil
}

func (lsc *LogSchemaCreate) createSpec() (*LogSchema, *sqlgraph.CreateSpec) {
	var (
		_node = &LogSchema{config: lsc.config}
		_spec = sqlgraph.NewCreateSpec(logschema.Table, sqlgraph.NewFieldSpec(logschema.FieldID, field.TypeInt))
	)
	if value, ok := lsc.mutation.Title(); ok {
		_spec.SetField(logschema.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := lsc.mutation.Description(); ok {
		_spec.SetField(logschema.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := lsc.mutation.Name(); ok {
		_spec.SetField(logschema.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := lsc.mutation.GetFields(); ok {
		_spec.SetField(logschema.FieldFields, field.TypeJSON, value)
		_node.Fields = value
	}
	if value, ok := lsc.mutation.RetentionTime(); ok {
		_spec.SetField(logschema.FieldRetentionTime, field.TypeInt64, value)
		_node.RetentionTime = value
	}
	return _node, _spec
}

// LogSchemaCreateBulk is the builder for creating many LogSchema entities in bulk.
type LogSchemaCreateBulk struct {
	config
	err      error
	builders []*LogSchemaCreate
}

// Save creates the LogSchema entities in the database.
func (lscb *LogSchemaCreateBulk) Save(ctx context.Context) ([]*LogSchema, error) {
	if lscb.err != nil {
		return nil, lscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(lscb.builders))
	nodes := make([]*LogSchema, len(lscb.builders))
	mutators := make([]Mutator, len(lscb.builders))
	for i := range lscb.builders {
		func(i int, root context.Context) {
			builder := lscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LogSchemaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lscb *LogSchemaCreateBulk) SaveX(ctx context.Context) []*LogSchema {
	v, err := lscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lscb *LogSchemaCreateBulk) Exec(ctx context.Context) error {
	_, err := lscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lscb *LogSchemaCreateBulk) ExecX(ctx context.Context) {
	if err := lscb.Exec(ctx); err != nil {
		panic(err)
	}
}
