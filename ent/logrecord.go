// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"moonlogs/ent/logrecord"
	"moonlogs/ent/schema"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LogRecord is the model entity for the LogRecord schema.
type LogRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// SchemaName holds the value of the "schema_name" field.
	SchemaName string `json:"schema_name,omitempty"`
	// SchemaID holds the value of the "schema_id" field.
	SchemaID int `json:"schema_id,omitempty"`
	// Query holds the value of the "query" field.
	Query schema.Query `json:"query,omitempty"`
	// GroupHash holds the value of the "group_hash" field.
	GroupHash string `json:"group_hash,omitempty"`
	// Level holds the value of the "level" field.
	Level        string `json:"level,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logrecord.FieldQuery:
			values[i] = new([]byte)
		case logrecord.FieldID, logrecord.FieldSchemaID:
			values[i] = new(sql.NullInt64)
		case logrecord.FieldText, logrecord.FieldSchemaName, logrecord.FieldGroupHash, logrecord.FieldLevel:
			values[i] = new(sql.NullString)
		case logrecord.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogRecord fields.
func (lr *LogRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			lr.ID = int(value.Int64)
		case logrecord.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				lr.Text = value.String
			}
		case logrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				lr.CreatedAt = value.Time
			}
		case logrecord.FieldSchemaName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field schema_name", values[i])
			} else if value.Valid {
				lr.SchemaName = value.String
			}
		case logrecord.FieldSchemaID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field schema_id", values[i])
			} else if value.Valid {
				lr.SchemaID = int(value.Int64)
			}
		case logrecord.FieldQuery:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field query", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &lr.Query); err != nil {
					return fmt.Errorf("unmarshal field query: %w", err)
				}
			}
		case logrecord.FieldGroupHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group_hash", values[i])
			} else if value.Valid {
				lr.GroupHash = value.String
			}
		case logrecord.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				lr.Level = value.String
			}
		default:
			lr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogRecord.
// This includes values selected through modifiers, order, etc.
func (lr *LogRecord) Value(name string) (ent.Value, error) {
	return lr.selectValues.Get(name)
}

// Update returns a builder for updating this LogRecord.
// Note that you need to call LogRecord.Unwrap() before calling this method if this LogRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (lr *LogRecord) Update() *LogRecordUpdateOne {
	return NewLogRecordClient(lr.config).UpdateOne(lr)
}

// Unwrap unwraps the LogRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (lr *LogRecord) Unwrap() *LogRecord {
	_tx, ok := lr.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogRecord is not a transactional entity")
	}
	lr.config.driver = _tx.drv
	return lr
}

// String implements the fmt.Stringer.
func (lr *LogRecord) String() string {
	var builder strings.Builder
	builder.WriteString("LogRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", lr.ID))
	builder.WriteString("text=")
	builder.WriteString(lr.Text)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(lr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("schema_name=")
	builder.WriteString(lr.SchemaName)
	builder.WriteString(", ")
	builder.WriteString("schema_id=")
	builder.WriteString(fmt.Sprintf("%v", lr.SchemaID))
	builder.WriteString(", ")
	builder.WriteString("query=")
	builder.WriteString(fmt.Sprintf("%v", lr.Query))
	builder.WriteString(", ")
	builder.WriteString("group_hash=")
	builder.WriteString(lr.GroupHash)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(lr.Level)
	builder.WriteByte(')')
	return builder.String()
}

// LogRecords is a parsable slice of LogRecord.
type LogRecords []*LogRecord
