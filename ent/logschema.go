// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"moonlogs/ent/logschema"
	"moonlogs/ent/schema"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// LogSchema is the model entity for the LogSchema schema.
type LogSchema struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Fields holds the value of the "fields" field.
	Fields       []schema.Field `json:"fields,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*LogSchema) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case logschema.FieldFields:
			values[i] = new([]byte)
		case logschema.FieldID:
			values[i] = new(sql.NullInt64)
		case logschema.FieldTitle, logschema.FieldDescription, logschema.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the LogSchema fields.
func (ls *LogSchema) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case logschema.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ls.ID = int(value.Int64)
		case logschema.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ls.Title = value.String
			}
		case logschema.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ls.Description = value.String
			}
		case logschema.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ls.Name = value.String
			}
		case logschema.FieldFields:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field fields", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ls.Fields); err != nil {
					return fmt.Errorf("unmarshal field fields: %w", err)
				}
			}
		default:
			ls.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the LogSchema.
// This includes values selected through modifiers, order, etc.
func (ls *LogSchema) Value(name string) (ent.Value, error) {
	return ls.selectValues.Get(name)
}

// Update returns a builder for updating this LogSchema.
// Note that you need to call LogSchema.Unwrap() before calling this method if this LogSchema
// was returned from a transaction, and the transaction was committed or rolled back.
func (ls *LogSchema) Update() *LogSchemaUpdateOne {
	return NewLogSchemaClient(ls.config).UpdateOne(ls)
}

// Unwrap unwraps the LogSchema entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ls *LogSchema) Unwrap() *LogSchema {
	_tx, ok := ls.config.driver.(*txDriver)
	if !ok {
		panic("ent: LogSchema is not a transactional entity")
	}
	ls.config.driver = _tx.drv
	return ls
}

// String implements the fmt.Stringer.
func (ls *LogSchema) String() string {
	var builder strings.Builder
	builder.WriteString("LogSchema(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ls.ID))
	builder.WriteString("title=")
	builder.WriteString(ls.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(ls.Description)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ls.Name)
	builder.WriteString(", ")
	builder.WriteString("fields=")
	builder.WriteString(fmt.Sprintf("%v", ls.Fields))
	builder.WriteByte(')')
	return builder.String()
}

// LogSchemas is a parsable slice of LogSchema.
type LogSchemas []*LogSchema
