// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gorilla/mux"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	Http1Scopes = "http1.Scopes"
)

// Defines values for Level.
const (
	Debug Level = "Debug"
	Error Level = "Error"
	Fatal Level = "Fatal"
	Info  Level = "Info"
	Trace Level = "Trace"
	Warn  Level = "Warn"
)

// Defines values for UserRole.
const (
	Admin  UserRole = "Admin"
	Member UserRole = "Member"
	System UserRole = "System"
)

// ApiToken defines model for ApiToken.
type ApiToken struct {
	Id        float32 `json:"id"`
	IsRevoked bool    `json:"is_revoked"`
	Name      string  `json:"name"`
	Token     string  `json:"token"`
}

// Credentials defines model for Credentials.
type Credentials struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Level defines model for Level.
type Level string

// Meta defines model for Meta.
type Meta struct {
	Count int `json:"count"`
	Page  int `json:"page"`
	Pages int `json:"pages"`
}

// Record defines model for Record.
type Record struct {
	CreatedAt  *string                `json:"created_at,omitempty"`
	GroupHash  *string                `json:"group_hash,omitempty"`
	Id         int                    `json:"id"`
	Kind       string                 `json:"kind"`
	Level      *Record_Level          `json:"level,omitempty"`
	Query      map[string]interface{} `json:"query"`
	SchemaId   *int                   `json:"schema_id,omitempty"`
	SchemaName string                 `json:"schema_name"`
	Text       string                 `json:"text"`
}

// Record_Level defines model for Record.Level.
type Record_Level struct {
	union json.RawMessage
}

// Schema defines model for Schema.
type Schema struct {
	Description   *string       `json:"description,omitempty"`
	Fields        []SchemaField `json:"fields"`
	Id            int           `json:"id"`
	Kinds         []SchemaKind  `json:"kinds"`
	Name          string        `json:"name"`
	RetentionDays *int          `json:"retention_days,omitempty"`
	Tags          []float32     `json:"tags"`
	Title         string        `json:"title"`
}

// SchemaField defines model for SchemaField.
type SchemaField struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// SchemaKind defines model for SchemaKind.
type SchemaKind struct {
	Name  string `json:"name"`
	Title string `json:"title"`
}

// SchemaSearch defines model for SchemaSearch.
type SchemaSearch struct {
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// Session defines model for Session.
type Session struct {
	Token string `json:"token"`
}

// Tag defines model for Tag.
type Tag struct {
	Id   int    `json:"id"`
	Name string `json:"name"`
}

// User defines model for User.
type User struct {
	Email          string    `json:"email"`
	Id             int       `json:"id"`
	Name           string    `json:"name"`
	Password       string    `json:"password"`
	PasswordDigest *string   `json:"password_digest,omitempty"`
	Role           User_Role `json:"role"`
	Tags           []float32 `json:"tags"`
	Token          *string   `json:"token,omitempty"`
}

// User_Role defines model for User.Role.
type User_Role struct {
	union json.RawMessage
}

// UserRole defines model for UserRole.
type UserRole string

// GetApiLogsParams defines parameters for GetApiLogs.
type GetApiLogsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiLogsSearchParams defines parameters for PostApiLogsSearch.
type PostApiLogsSearchParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostApiApiTokensJSONRequestBody defines body for PostApiApiTokens for application/json ContentType.
type PostApiApiTokensJSONRequestBody = ApiToken

// PutApiApiTokensIdJSONRequestBody defines body for PutApiApiTokensId for application/json ContentType.
type PutApiApiTokensIdJSONRequestBody = ApiToken

// PostApiLogsJSONRequestBody defines body for PostApiLogs for application/json ContentType.
type PostApiLogsJSONRequestBody = Record

// PostApiLogsSearchJSONRequestBody defines body for PostApiLogsSearch for application/json ContentType.
type PostApiLogsSearchJSONRequestBody = Record

// PostApiSchemasJSONRequestBody defines body for PostApiSchemas for application/json ContentType.
type PostApiSchemasJSONRequestBody = Schema

// PostApiSchemasSearchJSONRequestBody defines body for PostApiSchemasSearch for application/json ContentType.
type PostApiSchemasSearchJSONRequestBody = SchemaSearch

// PutApiSchemasIdJSONRequestBody defines body for PutApiSchemasId for application/json ContentType.
type PutApiSchemasIdJSONRequestBody = Schema

// PostApiSessionJSONRequestBody defines body for PostApiSession for application/json ContentType.
type PostApiSessionJSONRequestBody = Credentials

// PostApiSetupRegisterAdminJSONRequestBody defines body for PostApiSetupRegisterAdmin for application/json ContentType.
type PostApiSetupRegisterAdminJSONRequestBody = User

// PostApiTagsJSONRequestBody defines body for PostApiTags for application/json ContentType.
type PostApiTagsJSONRequestBody = Tag

// PutApiTagsIdJSONRequestBody defines body for PutApiTagsId for application/json ContentType.
type PutApiTagsIdJSONRequestBody = Tag

// PostApiUsersJSONRequestBody defines body for PostApiUsers for application/json ContentType.
type PostApiUsersJSONRequestBody = User

// PutApiUsersIdJSONRequestBody defines body for PutApiUsersId for application/json ContentType.
type PutApiUsersIdJSONRequestBody = User

// AsLevel returns the union data inside the Record_Level as a Level
func (t Record_Level) AsLevel() (Level, error) {
	var body Level
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLevel overwrites any union data inside the Record_Level as the provided Level
func (t *Record_Level) FromLevel(v Level) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLevel performs a merge with any union data inside the Record_Level, using the provided Level
func (t *Record_Level) MergeLevel(v Level) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t Record_Level) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *Record_Level) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsUserRole returns the union data inside the User_Role as a UserRole
func (t User_Role) AsUserRole() (UserRole, error) {
	var body UserRole
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromUserRole overwrites any union data inside the User_Role as the provided UserRole
func (t *User_Role) FromUserRole(v UserRole) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeUserRole performs a merge with any union data inside the User_Role, using the provided UserRole
func (t *User_Role) MergeUserRole(v UserRole) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t User_Role) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *User_Role) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /api/api_tokens)
	GetApiApiTokens(w http.ResponseWriter, r *http.Request)

	// (POST /api/api_tokens)
	PostApiApiTokens(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/api_tokens/{id})
	DeleteApiApiTokensId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/api_tokens/{id})
	GetApiApiTokensId(w http.ResponseWriter, r *http.Request, id int)

	// (PUT /api/api_tokens/{id})
	PutApiApiTokensId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/logs)
	GetApiLogs(w http.ResponseWriter, r *http.Request, params GetApiLogsParams)

	// (POST /api/logs)
	PostApiLogs(w http.ResponseWriter, r *http.Request)

	// (GET /api/logs/group/{schema_name}/{hash})
	GetApiLogsGroupSchemaNameHash(w http.ResponseWriter, r *http.Request, schemaName string, hash string)

	// (POST /api/logs/search)
	PostApiLogsSearch(w http.ResponseWriter, r *http.Request, params PostApiLogsSearchParams)

	// (GET /api/logs/{id})
	GetApiLogsId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/schemas)
	GetApiSchemas(w http.ResponseWriter, r *http.Request)

	// (POST /api/schemas)
	PostApiSchemas(w http.ResponseWriter, r *http.Request)

	// (POST /api/schemas/search)
	PostApiSchemasSearch(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/schemas/{id})
	DeleteApiSchemasId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/schemas/{id})
	GetApiSchemasId(w http.ResponseWriter, r *http.Request, id int)

	// (PUT /api/schemas/{id})
	PutApiSchemasId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/session)
	GetApiSession(w http.ResponseWriter, r *http.Request)

	// (POST /api/session)
	PostApiSession(w http.ResponseWriter, r *http.Request)

	// (POST /api/setup/register_admin)
	PostApiSetupRegisterAdmin(w http.ResponseWriter, r *http.Request)

	// (GET /api/tags)
	GetApiTags(w http.ResponseWriter, r *http.Request)

	// (POST /api/tags)
	PostApiTags(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/tags/{id})
	DeleteApiTagsId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/tags/{id})
	GetApiTagsId(w http.ResponseWriter, r *http.Request, id int)

	// (PUT /api/tags/{id})
	PutApiTagsId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/users)
	GetApiUsers(w http.ResponseWriter, r *http.Request)

	// (POST /api/users)
	PostApiUsers(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/users/{id})
	DeleteApiUsersId(w http.ResponseWriter, r *http.Request, id int)

	// (GET /api/users/{id})
	GetApiUsersId(w http.ResponseWriter, r *http.Request, id int)

	// (PUT /api/users/{id})
	PutApiUsersId(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetApiApiTokens operation middleware
func (siw *ServerInterfaceWrapper) GetApiApiTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiApiTokens(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiApiTokens operation middleware
func (siw *ServerInterfaceWrapper) PostApiApiTokens(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiApiTokens(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiApiTokensId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiApiTokensId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiApiTokensId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiApiTokensId operation middleware
func (siw *ServerInterfaceWrapper) GetApiApiTokensId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiApiTokensId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiApiTokensId operation middleware
func (siw *ServerInterfaceWrapper) PutApiApiTokensId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiApiTokensId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiLogs operation middleware
func (siw *ServerInterfaceWrapper) GetApiLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiLogsParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiLogs(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiLogs operation middleware
func (siw *ServerInterfaceWrapper) PostApiLogs(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiLogs(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiLogsGroupSchemaNameHash operation middleware
func (siw *ServerInterfaceWrapper) GetApiLogsGroupSchemaNameHash(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "schema_name" -------------
	var schemaName string

	err = runtime.BindStyledParameter("simple", false, "schema_name", mux.Vars(r)["schema_name"], &schemaName)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "schema_name", Err: err})
		return
	}

	// ------------- Path parameter "hash" -------------
	var hash string

	err = runtime.BindStyledParameter("simple", false, "hash", mux.Vars(r)["hash"], &hash)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hash", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiLogsGroupSchemaNameHash(w, r, schemaName, hash)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiLogsSearch operation middleware
func (siw *ServerInterfaceWrapper) PostApiLogsSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostApiLogsSearchParams

	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", r.URL.Query(), &params.Page)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "page", Err: err})
		return
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiLogsSearch(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiLogsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiLogsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiLogsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiSchemas operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiSchemas operation middleware
func (siw *ServerInterfaceWrapper) PostApiSchemas(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSchemas(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiSchemasSearch operation middleware
func (siw *ServerInterfaceWrapper) PostApiSchemasSearch(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSchemasSearch(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiSchemasId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiSchemasId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiSchemasId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiSchemasId operation middleware
func (siw *ServerInterfaceWrapper) GetApiSchemasId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSchemasId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiSchemasId operation middleware
func (siw *ServerInterfaceWrapper) PutApiSchemasId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiSchemasId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiSession operation middleware
func (siw *ServerInterfaceWrapper) GetApiSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiSession operation middleware
func (siw *ServerInterfaceWrapper) PostApiSession(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSession(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiSetupRegisterAdmin operation middleware
func (siw *ServerInterfaceWrapper) PostApiSetupRegisterAdmin(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiSetupRegisterAdmin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiTags operation middleware
func (siw *ServerInterfaceWrapper) GetApiTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiTags operation middleware
func (siw *ServerInterfaceWrapper) PostApiTags(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiTags(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiTagsId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiTagsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiTagsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiTagsId operation middleware
func (siw *ServerInterfaceWrapper) GetApiTagsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiTagsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiTagsId operation middleware
func (siw *ServerInterfaceWrapper) PutApiTagsId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiTagsId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiUsers operation middleware
func (siw *ServerInterfaceWrapper) GetApiUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiUsers operation middleware
func (siw *ServerInterfaceWrapper) PostApiUsers(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiUsersId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiUsersId operation middleware
func (siw *ServerInterfaceWrapper) GetApiUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiUsersId operation middleware
func (siw *ServerInterfaceWrapper) PutApiUsersId(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", mux.Vars(r)["id"], &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Http1Scopes, []string{})

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiUsersId(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{})
}

type GorillaServerOptions struct {
	BaseURL          string
	BaseRouter       *mux.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r *mux.Router) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r *mux.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, GorillaServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options GorillaServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = mux.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.HandleFunc(options.BaseURL+"/api/api_tokens", wrapper.GetApiApiTokens).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/api_tokens", wrapper.PostApiApiTokens).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/api_tokens/{id}", wrapper.DeleteApiApiTokensId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/api_tokens/{id}", wrapper.GetApiApiTokensId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/api_tokens/{id}", wrapper.PutApiApiTokensId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/logs", wrapper.GetApiLogs).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/logs", wrapper.PostApiLogs).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/logs/group/{schema_name}/{hash}", wrapper.GetApiLogsGroupSchemaNameHash).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/logs/search", wrapper.PostApiLogsSearch).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/logs/{id}", wrapper.GetApiLogsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/schemas", wrapper.GetApiSchemas).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/schemas", wrapper.PostApiSchemas).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/schemas/search", wrapper.PostApiSchemasSearch).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/schemas/{id}", wrapper.DeleteApiSchemasId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/schemas/{id}", wrapper.GetApiSchemasId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/schemas/{id}", wrapper.PutApiSchemasId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/session", wrapper.GetApiSession).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/session", wrapper.PostApiSession).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/setup/register_admin", wrapper.PostApiSetupRegisterAdmin).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/tags", wrapper.GetApiTags).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/tags", wrapper.PostApiTags).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/tags/{id}", wrapper.DeleteApiTagsId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/tags/{id}", wrapper.GetApiTagsId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/tags/{id}", wrapper.PutApiTagsId).Methods("PUT")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.GetApiUsers).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users", wrapper.PostApiUsers).Methods("POST")

	r.HandleFunc(options.BaseURL+"/api/users/{id}", wrapper.DeleteApiUsersId).Methods("DELETE")

	r.HandleFunc(options.BaseURL+"/api/users/{id}", wrapper.GetApiUsersId).Methods("GET")

	r.HandleFunc(options.BaseURL+"/api/users/{id}", wrapper.PutApiUsersId).Methods("PUT")

	return r
}

type GetApiApiTokensRequestObject struct {
}

type GetApiApiTokensResponseObject interface {
	VisitGetApiApiTokensResponse(w http.ResponseWriter) error
}

type GetApiApiTokens200JSONResponse struct {
	Code    int        `json:"code"`
	Data    []ApiToken `json:"data"`
	Error   string     `json:"error"`
	Meta    Meta       `json:"meta"`
	Success bool       `json:"success"`
}

func (response GetApiApiTokens200JSONResponse) VisitGetApiApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiApiTokensRequestObject struct {
	Body *PostApiApiTokensJSONRequestBody
}

type PostApiApiTokensResponseObject interface {
	VisitPostApiApiTokensResponse(w http.ResponseWriter) error
}

type PostApiApiTokens200JSONResponse struct {
	Code    int      `json:"code"`
	Data    ApiToken `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response PostApiApiTokens200JSONResponse) VisitPostApiApiTokensResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiApiTokensIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteApiApiTokensIdResponseObject interface {
	VisitDeleteApiApiTokensIdResponse(w http.ResponseWriter) error
}

type DeleteApiApiTokensId200JSONResponse struct {
	Code    int     `json:"code"`
	Data    float32 `json:"data"`
	Error   string  `json:"error"`
	Meta    Meta    `json:"meta"`
	Success bool    `json:"success"`
}

func (response DeleteApiApiTokensId200JSONResponse) VisitDeleteApiApiTokensIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiApiTokensIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiApiTokensIdResponseObject interface {
	VisitGetApiApiTokensIdResponse(w http.ResponseWriter) error
}

type GetApiApiTokensId200JSONResponse struct {
	Code    int      `json:"code"`
	Data    ApiToken `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response GetApiApiTokensId200JSONResponse) VisitGetApiApiTokensIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiApiTokensIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutApiApiTokensIdJSONRequestBody
}

type PutApiApiTokensIdResponseObject interface {
	VisitPutApiApiTokensIdResponse(w http.ResponseWriter) error
}

type PutApiApiTokensId200JSONResponse struct {
	Code    int      `json:"code"`
	Data    ApiToken `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response PutApiApiTokensId200JSONResponse) VisitPutApiApiTokensIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiLogsRequestObject struct {
	Params GetApiLogsParams
}

type GetApiLogsResponseObject interface {
	VisitGetApiLogsResponse(w http.ResponseWriter) error
}

type GetApiLogs200JSONResponse struct {
	Code    int      `json:"code"`
	Data    []Record `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response GetApiLogs200JSONResponse) VisitGetApiLogsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiLogsRequestObject struct {
	Body *PostApiLogsJSONRequestBody
}

type PostApiLogsResponseObject interface {
	VisitPostApiLogsResponse(w http.ResponseWriter) error
}

type PostApiLogs200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Record `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PostApiLogs200JSONResponse) VisitPostApiLogsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiLogsGroupSchemaNameHashRequestObject struct {
	SchemaName string `json:"schema_name"`
	Hash       string `json:"hash"`
}

type GetApiLogsGroupSchemaNameHashResponseObject interface {
	VisitGetApiLogsGroupSchemaNameHashResponse(w http.ResponseWriter) error
}

type GetApiLogsGroupSchemaNameHash200JSONResponse struct {
	Code    int      `json:"code"`
	Data    []Record `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response GetApiLogsGroupSchemaNameHash200JSONResponse) VisitGetApiLogsGroupSchemaNameHashResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiLogsSearchRequestObject struct {
	Params PostApiLogsSearchParams
	Body   *PostApiLogsSearchJSONRequestBody
}

type PostApiLogsSearchResponseObject interface {
	VisitPostApiLogsSearchResponse(w http.ResponseWriter) error
}

type PostApiLogsSearch200JSONResponse struct {
	Code    int      `json:"code"`
	Data    []Record `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response PostApiLogsSearch200JSONResponse) VisitPostApiLogsSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiLogsIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiLogsIdResponseObject interface {
	VisitGetApiLogsIdResponse(w http.ResponseWriter) error
}

type GetApiLogsId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Record `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiLogsId200JSONResponse) VisitGetApiLogsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSchemasRequestObject struct {
}

type GetApiSchemasResponseObject interface {
	VisitGetApiSchemasResponse(w http.ResponseWriter) error
}

type GetApiSchemas200JSONResponse struct {
	Code    int      `json:"code"`
	Data    []Schema `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response GetApiSchemas200JSONResponse) VisitGetApiSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSchemasRequestObject struct {
	Body *PostApiSchemasJSONRequestBody
}

type PostApiSchemasResponseObject interface {
	VisitPostApiSchemasResponse(w http.ResponseWriter) error
}

type PostApiSchemas200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Schema `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PostApiSchemas200JSONResponse) VisitPostApiSchemasResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSchemasSearchRequestObject struct {
	Body *PostApiSchemasSearchJSONRequestBody
}

type PostApiSchemasSearchResponseObject interface {
	VisitPostApiSchemasSearchResponse(w http.ResponseWriter) error
}

type PostApiSchemasSearch200JSONResponse struct {
	Code    int      `json:"code"`
	Data    []Schema `json:"data"`
	Error   string   `json:"error"`
	Meta    Meta     `json:"meta"`
	Success bool     `json:"success"`
}

func (response PostApiSchemasSearch200JSONResponse) VisitPostApiSchemasSearchResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiSchemasIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteApiSchemasIdResponseObject interface {
	VisitDeleteApiSchemasIdResponse(w http.ResponseWriter) error
}

type DeleteApiSchemasId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    int    `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response DeleteApiSchemasId200JSONResponse) VisitDeleteApiSchemasIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSchemasIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiSchemasIdResponseObject interface {
	VisitGetApiSchemasIdResponse(w http.ResponseWriter) error
}

type GetApiSchemasId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Schema `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiSchemasId200JSONResponse) VisitGetApiSchemasIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiSchemasIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutApiSchemasIdJSONRequestBody
}

type PutApiSchemasIdResponseObject interface {
	VisitPutApiSchemasIdResponse(w http.ResponseWriter) error
}

type PutApiSchemasId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Schema `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PutApiSchemasId200JSONResponse) VisitPutApiSchemasIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiSessionRequestObject struct {
}

type GetApiSessionResponseObject interface {
	VisitGetApiSessionResponse(w http.ResponseWriter) error
}

type GetApiSession200JSONResponse struct {
	Code    int     `json:"code"`
	Data    Session `json:"data"`
	Error   string  `json:"error"`
	Meta    Meta    `json:"meta"`
	Success bool    `json:"success"`
}

func (response GetApiSession200JSONResponse) VisitGetApiSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSessionRequestObject struct {
	Body *PostApiSessionJSONRequestBody
}

type PostApiSessionResponseObject interface {
	VisitPostApiSessionResponse(w http.ResponseWriter) error
}

type PostApiSession200JSONResponse struct {
	Code    int     `json:"code"`
	Data    Session `json:"data"`
	Error   string  `json:"error"`
	Meta    Meta    `json:"meta"`
	Success bool    `json:"success"`
}

func (response PostApiSession200JSONResponse) VisitPostApiSessionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiSetupRegisterAdminRequestObject struct {
	Body *PostApiSetupRegisterAdminJSONRequestBody
}

type PostApiSetupRegisterAdminResponseObject interface {
	VisitPostApiSetupRegisterAdminResponse(w http.ResponseWriter) error
}

type PostApiSetupRegisterAdmin200JSONResponse User

func (response PostApiSetupRegisterAdmin200JSONResponse) VisitPostApiSetupRegisterAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTagsRequestObject struct {
}

type GetApiTagsResponseObject interface {
	VisitGetApiTagsResponse(w http.ResponseWriter) error
}

type GetApiTags200JSONResponse struct {
	Code    int    `json:"code"`
	Data    []Tag  `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiTags200JSONResponse) VisitGetApiTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiTagsRequestObject struct {
	Body *PostApiTagsJSONRequestBody
}

type PostApiTagsResponseObject interface {
	VisitPostApiTagsResponse(w http.ResponseWriter) error
}

type PostApiTags200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Tag    `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PostApiTags200JSONResponse) VisitPostApiTagsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiTagsIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteApiTagsIdResponseObject interface {
	VisitDeleteApiTagsIdResponse(w http.ResponseWriter) error
}

type DeleteApiTagsId200JSONResponse struct {
	Code    int     `json:"code"`
	Data    float32 `json:"data"`
	Error   string  `json:"error"`
	Meta    Meta    `json:"meta"`
	Success bool    `json:"success"`
}

func (response DeleteApiTagsId200JSONResponse) VisitDeleteApiTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiTagsIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiTagsIdResponseObject interface {
	VisitGetApiTagsIdResponse(w http.ResponseWriter) error
}

type GetApiTagsId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Tag    `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiTagsId200JSONResponse) VisitGetApiTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiTagsIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutApiTagsIdJSONRequestBody
}

type PutApiTagsIdResponseObject interface {
	VisitPutApiTagsIdResponse(w http.ResponseWriter) error
}

type PutApiTagsId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    Tag    `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PutApiTagsId200JSONResponse) VisitPutApiTagsIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUsersRequestObject struct {
}

type GetApiUsersResponseObject interface {
	VisitGetApiUsersResponse(w http.ResponseWriter) error
}

type GetApiUsers200JSONResponse struct {
	Code    int    `json:"code"`
	Data    []User `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiUsers200JSONResponse) VisitGetApiUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostApiUsersRequestObject struct {
	Body *PostApiUsersJSONRequestBody
}

type PostApiUsersResponseObject interface {
	VisitPostApiUsersResponse(w http.ResponseWriter) error
}

type PostApiUsers200JSONResponse struct {
	Code    int    `json:"code"`
	Data    User   `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PostApiUsers200JSONResponse) VisitPostApiUsersResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteApiUsersIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteApiUsersIdResponseObject interface {
	VisitDeleteApiUsersIdResponse(w http.ResponseWriter) error
}

type DeleteApiUsersId200JSONResponse struct {
	Code int `json:"code"`

	// Data Deleted User's ID
	Data    int    `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response DeleteApiUsersId200JSONResponse) VisitDeleteApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetApiUsersIdRequestObject struct {
	Id int `json:"id"`
}

type GetApiUsersIdResponseObject interface {
	VisitGetApiUsersIdResponse(w http.ResponseWriter) error
}

type GetApiUsersId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    User   `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response GetApiUsersId200JSONResponse) VisitGetApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutApiUsersIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutApiUsersIdJSONRequestBody
}

type PutApiUsersIdResponseObject interface {
	VisitPutApiUsersIdResponse(w http.ResponseWriter) error
}

type PutApiUsersId200JSONResponse struct {
	Code    int    `json:"code"`
	Data    User   `json:"data"`
	Error   string `json:"error"`
	Meta    Meta   `json:"meta"`
	Success bool   `json:"success"`
}

func (response PutApiUsersId200JSONResponse) VisitPutApiUsersIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /api/api_tokens)
	GetApiApiTokens(ctx context.Context, request GetApiApiTokensRequestObject) (GetApiApiTokensResponseObject, error)

	// (POST /api/api_tokens)
	PostApiApiTokens(ctx context.Context, request PostApiApiTokensRequestObject) (PostApiApiTokensResponseObject, error)

	// (DELETE /api/api_tokens/{id})
	DeleteApiApiTokensId(ctx context.Context, request DeleteApiApiTokensIdRequestObject) (DeleteApiApiTokensIdResponseObject, error)

	// (GET /api/api_tokens/{id})
	GetApiApiTokensId(ctx context.Context, request GetApiApiTokensIdRequestObject) (GetApiApiTokensIdResponseObject, error)

	// (PUT /api/api_tokens/{id})
	PutApiApiTokensId(ctx context.Context, request PutApiApiTokensIdRequestObject) (PutApiApiTokensIdResponseObject, error)

	// (GET /api/logs)
	GetApiLogs(ctx context.Context, request GetApiLogsRequestObject) (GetApiLogsResponseObject, error)

	// (POST /api/logs)
	PostApiLogs(ctx context.Context, request PostApiLogsRequestObject) (PostApiLogsResponseObject, error)

	// (GET /api/logs/group/{schema_name}/{hash})
	GetApiLogsGroupSchemaNameHash(ctx context.Context, request GetApiLogsGroupSchemaNameHashRequestObject) (GetApiLogsGroupSchemaNameHashResponseObject, error)

	// (POST /api/logs/search)
	PostApiLogsSearch(ctx context.Context, request PostApiLogsSearchRequestObject) (PostApiLogsSearchResponseObject, error)

	// (GET /api/logs/{id})
	GetApiLogsId(ctx context.Context, request GetApiLogsIdRequestObject) (GetApiLogsIdResponseObject, error)

	// (GET /api/schemas)
	GetApiSchemas(ctx context.Context, request GetApiSchemasRequestObject) (GetApiSchemasResponseObject, error)

	// (POST /api/schemas)
	PostApiSchemas(ctx context.Context, request PostApiSchemasRequestObject) (PostApiSchemasResponseObject, error)

	// (POST /api/schemas/search)
	PostApiSchemasSearch(ctx context.Context, request PostApiSchemasSearchRequestObject) (PostApiSchemasSearchResponseObject, error)

	// (DELETE /api/schemas/{id})
	DeleteApiSchemasId(ctx context.Context, request DeleteApiSchemasIdRequestObject) (DeleteApiSchemasIdResponseObject, error)

	// (GET /api/schemas/{id})
	GetApiSchemasId(ctx context.Context, request GetApiSchemasIdRequestObject) (GetApiSchemasIdResponseObject, error)

	// (PUT /api/schemas/{id})
	PutApiSchemasId(ctx context.Context, request PutApiSchemasIdRequestObject) (PutApiSchemasIdResponseObject, error)

	// (GET /api/session)
	GetApiSession(ctx context.Context, request GetApiSessionRequestObject) (GetApiSessionResponseObject, error)

	// (POST /api/session)
	PostApiSession(ctx context.Context, request PostApiSessionRequestObject) (PostApiSessionResponseObject, error)

	// (POST /api/setup/register_admin)
	PostApiSetupRegisterAdmin(ctx context.Context, request PostApiSetupRegisterAdminRequestObject) (PostApiSetupRegisterAdminResponseObject, error)

	// (GET /api/tags)
	GetApiTags(ctx context.Context, request GetApiTagsRequestObject) (GetApiTagsResponseObject, error)

	// (POST /api/tags)
	PostApiTags(ctx context.Context, request PostApiTagsRequestObject) (PostApiTagsResponseObject, error)

	// (DELETE /api/tags/{id})
	DeleteApiTagsId(ctx context.Context, request DeleteApiTagsIdRequestObject) (DeleteApiTagsIdResponseObject, error)

	// (GET /api/tags/{id})
	GetApiTagsId(ctx context.Context, request GetApiTagsIdRequestObject) (GetApiTagsIdResponseObject, error)

	// (PUT /api/tags/{id})
	PutApiTagsId(ctx context.Context, request PutApiTagsIdRequestObject) (PutApiTagsIdResponseObject, error)

	// (GET /api/users)
	GetApiUsers(ctx context.Context, request GetApiUsersRequestObject) (GetApiUsersResponseObject, error)

	// (POST /api/users)
	PostApiUsers(ctx context.Context, request PostApiUsersRequestObject) (PostApiUsersResponseObject, error)

	// (DELETE /api/users/{id})
	DeleteApiUsersId(ctx context.Context, request DeleteApiUsersIdRequestObject) (DeleteApiUsersIdResponseObject, error)

	// (GET /api/users/{id})
	GetApiUsersId(ctx context.Context, request GetApiUsersIdRequestObject) (GetApiUsersIdResponseObject, error)

	// (PUT /api/users/{id})
	PutApiUsersId(ctx context.Context, request PutApiUsersIdRequestObject) (PutApiUsersIdResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHttpHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHttpMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetApiApiTokens operation middleware
func (sh *strictHandler) GetApiApiTokens(w http.ResponseWriter, r *http.Request) {
	var request GetApiApiTokensRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiApiTokens(ctx, request.(GetApiApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiApiTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiApiTokensResponseObject); ok {
		if err := validResponse.VisitGetApiApiTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiApiTokens operation middleware
func (sh *strictHandler) PostApiApiTokens(w http.ResponseWriter, r *http.Request) {
	var request PostApiApiTokensRequestObject

	var body PostApiApiTokensJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiApiTokens(ctx, request.(PostApiApiTokensRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiApiTokens")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiApiTokensResponseObject); ok {
		if err := validResponse.VisitPostApiApiTokensResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiApiTokensId operation middleware
func (sh *strictHandler) DeleteApiApiTokensId(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteApiApiTokensIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiApiTokensId(ctx, request.(DeleteApiApiTokensIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiApiTokensId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiApiTokensIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiApiTokensIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiApiTokensId operation middleware
func (sh *strictHandler) GetApiApiTokensId(w http.ResponseWriter, r *http.Request, id int) {
	var request GetApiApiTokensIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiApiTokensId(ctx, request.(GetApiApiTokensIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiApiTokensId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiApiTokensIdResponseObject); ok {
		if err := validResponse.VisitGetApiApiTokensIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiApiTokensId operation middleware
func (sh *strictHandler) PutApiApiTokensId(w http.ResponseWriter, r *http.Request, id int) {
	var request PutApiApiTokensIdRequestObject

	request.Id = id

	var body PutApiApiTokensIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiApiTokensId(ctx, request.(PutApiApiTokensIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiApiTokensId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutApiApiTokensIdResponseObject); ok {
		if err := validResponse.VisitPutApiApiTokensIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiLogs operation middleware
func (sh *strictHandler) GetApiLogs(w http.ResponseWriter, r *http.Request, params GetApiLogsParams) {
	var request GetApiLogsRequestObject

	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiLogs(ctx, request.(GetApiLogsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiLogs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiLogsResponseObject); ok {
		if err := validResponse.VisitGetApiLogsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiLogs operation middleware
func (sh *strictHandler) PostApiLogs(w http.ResponseWriter, r *http.Request) {
	var request PostApiLogsRequestObject

	var body PostApiLogsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiLogs(ctx, request.(PostApiLogsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiLogs")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiLogsResponseObject); ok {
		if err := validResponse.VisitPostApiLogsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiLogsGroupSchemaNameHash operation middleware
func (sh *strictHandler) GetApiLogsGroupSchemaNameHash(w http.ResponseWriter, r *http.Request, schemaName string, hash string) {
	var request GetApiLogsGroupSchemaNameHashRequestObject

	request.SchemaName = schemaName
	request.Hash = hash

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiLogsGroupSchemaNameHash(ctx, request.(GetApiLogsGroupSchemaNameHashRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiLogsGroupSchemaNameHash")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiLogsGroupSchemaNameHashResponseObject); ok {
		if err := validResponse.VisitGetApiLogsGroupSchemaNameHashResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiLogsSearch operation middleware
func (sh *strictHandler) PostApiLogsSearch(w http.ResponseWriter, r *http.Request, params PostApiLogsSearchParams) {
	var request PostApiLogsSearchRequestObject

	request.Params = params

	var body PostApiLogsSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiLogsSearch(ctx, request.(PostApiLogsSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiLogsSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiLogsSearchResponseObject); ok {
		if err := validResponse.VisitPostApiLogsSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiLogsId operation middleware
func (sh *strictHandler) GetApiLogsId(w http.ResponseWriter, r *http.Request, id int) {
	var request GetApiLogsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiLogsId(ctx, request.(GetApiLogsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiLogsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiLogsIdResponseObject); ok {
		if err := validResponse.VisitGetApiLogsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSchemas operation middleware
func (sh *strictHandler) GetApiSchemas(w http.ResponseWriter, r *http.Request) {
	var request GetApiSchemasRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSchemas(ctx, request.(GetApiSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiSchemasResponseObject); ok {
		if err := validResponse.VisitGetApiSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSchemas operation middleware
func (sh *strictHandler) PostApiSchemas(w http.ResponseWriter, r *http.Request) {
	var request PostApiSchemasRequestObject

	var body PostApiSchemasJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSchemas(ctx, request.(PostApiSchemasRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSchemas")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiSchemasResponseObject); ok {
		if err := validResponse.VisitPostApiSchemasResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSchemasSearch operation middleware
func (sh *strictHandler) PostApiSchemasSearch(w http.ResponseWriter, r *http.Request) {
	var request PostApiSchemasSearchRequestObject

	var body PostApiSchemasSearchJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSchemasSearch(ctx, request.(PostApiSchemasSearchRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSchemasSearch")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiSchemasSearchResponseObject); ok {
		if err := validResponse.VisitPostApiSchemasSearchResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiSchemasId operation middleware
func (sh *strictHandler) DeleteApiSchemasId(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteApiSchemasIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiSchemasId(ctx, request.(DeleteApiSchemasIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiSchemasId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiSchemasIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiSchemasIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSchemasId operation middleware
func (sh *strictHandler) GetApiSchemasId(w http.ResponseWriter, r *http.Request, id int) {
	var request GetApiSchemasIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSchemasId(ctx, request.(GetApiSchemasIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSchemasId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiSchemasIdResponseObject); ok {
		if err := validResponse.VisitGetApiSchemasIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiSchemasId operation middleware
func (sh *strictHandler) PutApiSchemasId(w http.ResponseWriter, r *http.Request, id int) {
	var request PutApiSchemasIdRequestObject

	request.Id = id

	var body PutApiSchemasIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiSchemasId(ctx, request.(PutApiSchemasIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiSchemasId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutApiSchemasIdResponseObject); ok {
		if err := validResponse.VisitPutApiSchemasIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiSession operation middleware
func (sh *strictHandler) GetApiSession(w http.ResponseWriter, r *http.Request) {
	var request GetApiSessionRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiSession(ctx, request.(GetApiSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiSession")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiSessionResponseObject); ok {
		if err := validResponse.VisitGetApiSessionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSession operation middleware
func (sh *strictHandler) PostApiSession(w http.ResponseWriter, r *http.Request) {
	var request PostApiSessionRequestObject

	var body PostApiSessionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSession(ctx, request.(PostApiSessionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSession")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiSessionResponseObject); ok {
		if err := validResponse.VisitPostApiSessionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiSetupRegisterAdmin operation middleware
func (sh *strictHandler) PostApiSetupRegisterAdmin(w http.ResponseWriter, r *http.Request) {
	var request PostApiSetupRegisterAdminRequestObject

	var body PostApiSetupRegisterAdminJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiSetupRegisterAdmin(ctx, request.(PostApiSetupRegisterAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiSetupRegisterAdmin")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiSetupRegisterAdminResponseObject); ok {
		if err := validResponse.VisitPostApiSetupRegisterAdminResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiTags operation middleware
func (sh *strictHandler) GetApiTags(w http.ResponseWriter, r *http.Request) {
	var request GetApiTagsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiTags(ctx, request.(GetApiTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiTagsResponseObject); ok {
		if err := validResponse.VisitGetApiTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiTags operation middleware
func (sh *strictHandler) PostApiTags(w http.ResponseWriter, r *http.Request) {
	var request PostApiTagsRequestObject

	var body PostApiTagsJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiTags(ctx, request.(PostApiTagsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiTags")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiTagsResponseObject); ok {
		if err := validResponse.VisitPostApiTagsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiTagsId operation middleware
func (sh *strictHandler) DeleteApiTagsId(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteApiTagsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiTagsId(ctx, request.(DeleteApiTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiTagsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiTagsIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiTagsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiTagsId operation middleware
func (sh *strictHandler) GetApiTagsId(w http.ResponseWriter, r *http.Request, id int) {
	var request GetApiTagsIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiTagsId(ctx, request.(GetApiTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiTagsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiTagsIdResponseObject); ok {
		if err := validResponse.VisitGetApiTagsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiTagsId operation middleware
func (sh *strictHandler) PutApiTagsId(w http.ResponseWriter, r *http.Request, id int) {
	var request PutApiTagsIdRequestObject

	request.Id = id

	var body PutApiTagsIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiTagsId(ctx, request.(PutApiTagsIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiTagsId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutApiTagsIdResponseObject); ok {
		if err := validResponse.VisitPutApiTagsIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiUsers operation middleware
func (sh *strictHandler) GetApiUsers(w http.ResponseWriter, r *http.Request) {
	var request GetApiUsersRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiUsers(ctx, request.(GetApiUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiUsersResponseObject); ok {
		if err := validResponse.VisitGetApiUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PostApiUsers operation middleware
func (sh *strictHandler) PostApiUsers(w http.ResponseWriter, r *http.Request) {
	var request PostApiUsersRequestObject

	var body PostApiUsersJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PostApiUsers(ctx, request.(PostApiUsersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostApiUsers")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PostApiUsersResponseObject); ok {
		if err := validResponse.VisitPostApiUsersResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiUsersId operation middleware
func (sh *strictHandler) DeleteApiUsersId(w http.ResponseWriter, r *http.Request, id int) {
	var request DeleteApiUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiUsersId(ctx, request.(DeleteApiUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiUsersIdResponseObject); ok {
		if err := validResponse.VisitDeleteApiUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetApiUsersId operation middleware
func (sh *strictHandler) GetApiUsersId(w http.ResponseWriter, r *http.Request, id int) {
	var request GetApiUsersIdRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetApiUsersId(ctx, request.(GetApiUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetApiUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetApiUsersIdResponseObject); ok {
		if err := validResponse.VisitGetApiUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// PutApiUsersId operation middleware
func (sh *strictHandler) PutApiUsersId(w http.ResponseWriter, r *http.Request, id int) {
	var request PutApiUsersIdRequestObject

	request.Id = id

	var body PutApiUsersIdJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.PutApiUsersId(ctx, request.(PutApiUsersIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutApiUsersId")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(PutApiUsersIdResponseObject); ok {
		if err := validResponse.VisitPutApiUsersIdResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbS2/bOBD+KwZ3gb1orbS9+bTZpu0GfWzRpNhDEBiMNJHYSKJKUk0NQ/99wZclS7Qs",
	"N04sOz60MMLHzPCbx8cxPUcBTXOaQSY4mswRD2JIsfp4mpNLegeZ/JwzmgMTBNQICeX/YpYDmqCsSG+A",
	"odJDhE8Z/KB3UB++oTQBnMnxDKdQG+GCkSySA8KKaYyUHmLwvSBM7nglxdq5ZrMlmdeeXU9vvkEg5M6v",
	"GYSQCYIT3jYDUkwSp0I55vyesnC9TnqP2gqXFh/gByhBkBWpXHXJcCC1P4ObIkIeOs9uKfLQf5hJ094w",
	"Rhny0FsscFLbsNLvIwjctiegRSZqKpNMQKShyXEEq0e4a6hhqNrBMzLsMpexXyAwJ9fQjgEWEE6xcB55",
	"xGiRT2PMY+fwksvV1L8jWehckNgzpxn8e4smV3P0O4NbNEG/+ZXL+8bffQ1ReV166HsBbFbbszJNT56u",
	"0sUMr3Zz+Cn6ermcuryjVczY7Dr6CzW9ffQh8ICRXBCaORW7JZCEOrIFpOpD11lpMW/lImWW3g4zhmfr",
	"oNpUyHtpqkPGyjNmIGS802wa4hl3KyJwtKxHK5M1xQkiEugLnZq7SFDmbK35Rvpq9PSxtiBc7VT9VFvS",
	"arX09yacdiL8AjAL4s3dt0OLtiTg3OyzLKRnDdLTXDZc4mhNpay54IoTdfnTykP7yoFtUtQ21KWzClaD",
	"05BEwN05nVGNS78ULO35IleoLPwLQboBizDB2areRueOKF1oWSvnH0Hp5KHTMCWygl/MuIDUUbpllYCg",
	"YETMlM9rzGIh8hcL9qVYE2CmdjTr5QxUyuXwUwDLcHJGg3ZwoLckC0e0EKOUMhjhG/mR5xAo/CXJUDQh",
	"EzgQNWdBPMZJjoO7vyL5h3FAU3tGE/SZfNNoLkv6SGmW0IiPTj+fIw8lJICMQ5Ut0GmOgxhGL8cnyEMF",
	"S4wVE9+/v78fYzU6pizyzVLufzh//ebTxZs/X45PxrFIk1psL8QhD/0ApkMYvRifjF/IWTSHDOcETdCr",
	"8cn4lUJUxOp8fJwT+W+q3EP9KQJlvIwaLK05D9EEvQNxmhPLeaUcBjynUjE5+eXJiT070CQL53lCArWB",
	"/43rlMJXFOCAhivoV4g1k+tVExeM3OH9oEijKwpTQxa7dlaEUjpnEQTAuYu/N8LIzvS0cVYBY5GR2g6g",
	"sqzHgMoJxvuvrlXc55Q70PlMeRue7wVw8TcNZxsh0++AS23vE3pAX+B3B3Qd2QbsGwNdes3I9OckLHVG",
	"S0BA2wfO1N/rXnAeqkhnOAUBjCshRCYGGf1VBlMZvzJJsAK8GlCti8/1EyPfqmyHEst9Eu2BYDj86N1y",
	"mi5cWbp4MmiPuX9/vcfmfsXnuvnYB035XE5kuyHGi0x/qsNvPPfChKREoEElk15k0PTZnisVNJ7xGJnA",
	"nuyw8kCF984ZoMXXwP3wLOCr7q8/r/U7S38eYx6XPRLEO7lYt5A+4RT+wTzuVXiWu6trK1B1h3fuFmux",
	"/bc5ZpUd3juU1/Gq4bgu1Zje5DBK0SGlvL31SuOOjVqnDH6YV9p78Jqs9wwuTgMqeQ20HwZz7Uv2DpAv",
	"zKwhBqT5pnGIAenioNsmn3Votp+M7eEOi39WkO8OYgvqMtS/BnEjGPuSAQP9gg88ngMYEUOtyUNMAY2L",
	"yVa6FFav3u1p4yFP3/3KiiQpd9O7ro0cRqn2elTmZ8DAhpD0n6xxvbPAPZKFfWlZ8+r5UFd+MLOGBIhR",
	"aQgM3dVF7IHIelZeO/btB1r9KfHQom0vwa0FlShyn0FEuAA2xeoR1VoeLhd9MWvsu6vHwF09s9sC4L1k",
	"ND3eHpF9DdeRdC5xNMxewSWOnu23VAtQtu+X6liHlYcM0odV8mXo9b/8ScCPz5J2jGvzrSr69aveAeF5",
	"SJG7KcIdt77HRviY+ffef2wpKLhyjk4a9lXNGSIP0yRziO3abbTz1xCxCpbh3hC2GZAW7H297HcEYH8y",
	"pkA/kOq9nK+0ieFIWvgHH52fVT8VGmAr/mFPdry16fYZELTdx3P9sV8jrLfbhn90SI8VYA8rwOInoVeL",
	"XxiewS0uEoHK6/L/AAAA///n9Joxx0IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
